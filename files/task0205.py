"""
Solution to 10th task
- download the webpage with the paper
- download the HQ questions
- scrape? - to have paper text + image descriptions in one piece
- answer the questions with the scraped paper in context
- return the answers to HQ
"""

import requests
import json
import os
import zipfile
import re
import base64
import sys
from bs4 import BeautifulSoup
from markdownify import markdownify as md
from pprint import pp

from lib.aidevs import send_task_response
from sekrety import aidevs_api_key, central_domain, openai_api_key
from lib.myai import MyAI

# Helper functions generated by assistant :)
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')
def parse_questions_from_string(contents):
    questions_dict = {}
    # Split the string into lines
    lines = contents.splitlines()
    for line in lines:
        # Remove any leading/trailing whitespace
        line = line.strip()
        # Split the line into ID and question using '=' as the delimiter
        if '=' in line:
            question_id, question_text = line.split('=', 1)
            question_id = question_id.strip()
            question_text = question_text.strip()
            # Add the extracted data to the dictionary
            questions_dict[question_id] = question_text
    return questions_dict

ai = MyAI(openai_api_key, False, 30)
model = "gpt-4o"
task = "arxiv"
page_dir = f"https://centrala.{central_domain}/dane/"
page = page_dir + "arxiv-draft.html"
questions_page = f"https://centrala.{central_domain}/data/{aidevs_api_key}/arxiv.txt"

print (79*"=")

# Get the paper and the questions, then parse them
try:
    page_raw = requests.get(page)
except Exception as error:
    print (f"Error in GET request: {error}")
    sys.exit(1)
try:
    questions_raw = requests.get(questions_page)
except Exception as error:
    print (f"Error in GET request: {error}")
    sys.exit(1)
page_text = page_raw.content.decode('utf8')
questions_text = questions_raw.content.decode('utf8')
questions = parse_questions_from_string(questions_text)     # move questions to ready dictionary
page_nice = md(page_text)

# Parse the page with the paper to get images and audio recordings
soup = BeautifulSoup(page_raw.content, "html.parser")
result = soup.find("div", class_="container")
images = {}
audios = {}
for figure in result.find_all("figure"):
    image = figure.find("img")
    caption = figure.find("figcaption")
    images[image['src']] = {"caption": caption.get_text()}
for audio_entry in result.find_all("audio"):
    audio = audio_entry.find("source")
    audios[audio['src']] = {}
# Replace images and audio recordings with their descriptions and transcriptions
for image in images:
    image_file = requests.get(page_dir + image)
    with open("downloads/tempfile.png", "wb") as f:
        f.write(image_file.content)
        f.close()
    image64 = encode_image("downloads/tempfile.png")
    prompt = f"""
    The attached image is a part of a pseudo-scientific paper.
    Please interpret it with the given context. The image was put in the text with following caption:
    <caption>
    {images[image]['caption']}
    </caption>
    Your task is to describe in few sentences what you see in the image.
    Please try to describe the overall image meaning and situation, and also describe the contents and details of the image.
    Where could the picture be taken?
    What are the main elements of the picture?
    What else can you say about the image?
    Please write everything in one line, without any line breaks.
    """
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": [{
            "type": "image_url",
            "image_url": {
                "url": f"data:image/png;base64,{image64}"
            }
        }]
        }
    ]
    answer = ai.chat_completion(messages, model, 500, 0, "describing the pictures")
    images[image]['description'] = answer
    page_nice = re.sub(f"!\[\]\({image}\)", f"(Here in the paper was an image:\n<image_description>\n{answer}\n</image_description>\n)", page_nice)
for audio in audios:
    audio_download = requests.get(page_dir + audio)
    with open("downloads/tempfile.mp3", "wb") as f:
        f.write(audio_download.content)
        f.close()
    with open("downloads/tempfile.mp3", "rb") as audio_file:
        audio_text = ai.transcribe(audio_file, "audio transcription")
    audios[audio]['text'] = audio_text
    page_nice = re.sub("Twoja przeglądarka nie obsługuje elementu audio.", "", page_nice)
    page_nice = re.sub(f"\[.*?\]\({audio}\)", f"(Here in the paper was an audio recording. Below is the transcription:\n<audio_transcription>\n{audio_text}\n</audio_transcription>\n)", page_nice)
# Now we have the page ready and prepare to get the answers
system_prompt = f"""
You are a proffessor's assistant, who - after reading the thesis paper - is answering the questions based on the paper.
Below you have the original paper text.
The text had few images and audio recordings attached, which were replaced by the image descriptions and audio transcriptions.
Please, respond using the below paper, but also using your knowledge to understand the facts.
Respond only with single sentence, without any reflections or explanations added.
The paper:
<paper_text>
{page_nice}
</paper_text>
"""
print ("The questions are:")
pp (questions, indent=4, width=200)
for question in questions:
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": questions[question]}
    ]
    answer = ai.chat_completion(messages, model, 100, 0, "answering the questions")
    questions[question] = answer
print ("\n\nThe answers to the questions are as following:")
pp (questions, indent=4, width=200)
response = send_task_response(aidevs_api_key, task, questions, f"https://centrala.{central_domain}/report")
print ("\n\nResponse from HQ:")
pp (response, indent=4)
