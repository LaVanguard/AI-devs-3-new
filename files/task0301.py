"""
Solution to task 11
- Get the zip file
- Collect list of texts from all reports and "facts"
- Build the prompt asking for keywords, giving all knowledge in the context (for caching)
- Send the keywords to HQ
"""

import os
import requests
import zipfile
import re
from pprint import pp

from lib.aidevs import send_task_response
from secrets import aidevs_api_key, central_domain, openai_api_key
from lib.myai import MyAI

ai = MyAI(openai_api_key, False, 15)
model = "gpt-4o"
source_url = f"https://centrala.{central_domain}/dane/pliki_z_fabryki.zip"
task = "dokumenty"

# Quick unzip function generated by 4o
def download_and_extract_zip(url, download_dir='downloads', zip_filename='downloaded_zipfile.zip', extract_dir='extracted'):
    # Create download subdirectory if it doesn't exist
    if not os.path.exists(download_dir):
        os.makedirs(download_dir)
    # Download the file
    local_zip_path = os.path.join(download_dir, zip_filename)
    response = requests.get(url)
    if response.status_code == 200:
        with open(local_zip_path, 'wb') as f:
            f.write(response.content)
        print(f"Downloaded ZIP file to {local_zip_path}")
    else:
        print("Failed to download the file.")
        return
    # Create extraction subdirectory if it doesn't exist
    full_extract_dir = os.path.join(download_dir, extract_dir)
    if not os.path.exists(full_extract_dir):
        os.makedirs(full_extract_dir)
    # Extract the ZIP file
    with zipfile.ZipFile(local_zip_path, 'r') as zip_ref:
        zip_ref.extractall(full_extract_dir)
        print(f"Extracted files to {full_extract_dir}")
    # List all extracted files
    extracted_files = os.listdir(full_extract_dir)
    print("Extracted files:")
    pp(extracted_files, indent=4)
    return full_extract_dir

directory = download_and_extract_zip(source_url, "downloads", "s0301", "extracted_s0301")

reports = {}
for extracted_file in os.listdir(directory):
    if re.findall("\.txt$", extracted_file):
        print (f"Found text file: {extracted_file}")
        with open (os.path.join(directory, extracted_file), 'r', encoding='utf-8') as report_file:
            reports[extracted_file] = report_file.read()
facts = {}
facts_directory = os.path.join(directory,'facts')
for extracted_file in os.listdir(facts_directory):
    if re.findall("\.txt$", extracted_file):
        print (f"Found facts file: {extracted_file}")
        with open (os.path.join(facts_directory,extracted_file), 'r', encoding='utf-8') as facts_file:
            facts[extracted_file] = facts_file.read()

# Generating text from the sent facts and reports
facts_markdown = ""
for fact in facts:
    facts_markdown += f"# Fakty w pliku **{fact}**:\n\n"
    facts_markdown += f"{facts[fact]}\n\n"
reports_markdown = ""
for report in reports:
    reports_markdown += f"# Raport **{report}**:\n\n"
    reports_markdown += f"{reports[report]}\n\n"

# Preparing the main prompt
prompt = f"""
Twoim zadaniem jest przygotowanie metadanych - wielu słów kluczowych na podstawie dostarczonego przez użytkownika raportu.
Każde słowo kluczowe to jeden wyraz.
Jeżeli raport zawiera informacje o osobach lub o miejscach, dołóż również słowa kluczowe o tych osobach i miejscach, które znajdziesz w innych raportach i faktach.
Raporty dotyczą wydarzeń bezpieczeństwa, które wydarzyły się w różnych sektorach wokół fabryki.
Wygenerowane metadane powinny zawierać słowa kluczowe w języku polskim, opisujące dany raport przesłany przez użytkownika.
Bardzo ważne jest przy generowaniu słów kluczowych uwzględnienie całej posiadanej przez nas wiedzy, na przykład faktów które znamy, oraz odwołań w innych raportach.
Jeżeli znajdziesz powiązania raportu z innymi raportami lub faktami - w słowach kluczowych umieść również informacje z tych powiązań.
Poniżej znajdują się wszystkie zebrane przez nas dane:
<fakty>
{facts_markdown}
</fakty>
<raporty>
{reports_markdown}
</raporty>
Twoja odpowiedź powinna zawierać kilkadziesiąt pojedynczych słów kluczowych dla raportu podanego przez użytkownika.
Słowa kluczowe zapisz w języku polskim, w mianowniku, małymi literami. Powinny być one oddzielone przecinkami.
Nie podawaj w odpowiedzi żadnych innych słów ani znaków, jedynie pojedyncze słowa kluczowe oddzielone przecinkami.
"""
# Getting the keywords from AI
keywords = {}
for report in reports:
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": f"# Raport {report}:\n\n{reports[report]}"}
    ]
    keywords[report] = ai.chat_completion(messages, model, 1000, 0)
print ("Found keywords are:")
pp (keywords, indent=4, width=200)
# Sending the keywords to HQ
response = send_task_response(aidevs_api_key, task, keywords, f"https://centrala.{central_domain}/report")
print ("\n\nResponse from HQ:")
pp (response)
